/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.transaction.transaction.igu;

import com.transaction.transaction.logic.Controller;
import com.transaction.transaction.logic.Transaction;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author enzo
 */
public class TransactionTable extends javax.swing.JFrame {

    
        Controller control = new Controller();

    public TransactionTable() {
        initComponents();
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        LoaderLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TransactionTable = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Ubuntu Mono", 1, 24)); // NOI18N
        jLabel1.setText("Transaction Table");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(362, 10, -1, -1));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LoaderLabel.setIcon(new javax.swing.ImageIcon("/home/enzo/NetBeansProjects/icons/1488.gif")); // NOI18N
        jPanel2.add(LoaderLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 150, -1, -1));

        TransactionTable.setBorder(new javax.swing.border.MatteBorder(null));
        TransactionTable.setFont(new java.awt.Font("Ubuntu Mono", 0, 15)); // NOI18N
        TransactionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(TransactionTable);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 857, 382));

        btnUpdate.setFont(new java.awt.Font("Ubuntu Mono", 0, 14)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon("/home/enzo/NetBeansProjects/icons/floppy_9512164.png")); // NOI18N
        btnUpdate.setText(" Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel2.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(892, 119, -1, 40));

        btnDelete.setFont(new java.awt.Font("Ubuntu Mono", 0, 14)); // NOI18N
        btnDelete.setIcon(new javax.swing.ImageIcon("/home/enzo/NetBeansProjects/icons/delete_10336397.png")); // NOI18N
        btnDelete.setText(" Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel2.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(892, 48, -1, 40));

        jButton3.setFont(new java.awt.Font("Ubuntu Mono", 0, 14)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon("/home/enzo/NetBeansProjects/icons/left-arrow_10024675.png")); // NOI18N
        jButton3.setText(" Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(892, 185, 111, 39));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 53, 1060, -1));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(371, 474, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        //control de que la tabla no este vacia
        if(TransactionTable.getRowCount() > 0){
            //valido que se haya seleccionado un registro
            if(TransactionTable.getSelectedRow() != -1){
                //obtener la id de la transaccion que quiero borrar
                int idTransaction = Integer.parseInt(String.valueOf(TransactionTable.getValueAt(TransactionTable.getSelectedRow(), 0)));
                
                control.deleteTransaction(idTransaction);
                showMessage("The selected file records have been successfully removed from the database.", "Info", "Deletion operation completed");
                loadTable();
            }
            else {
                showMessage("You have not selected a record to delete.", "Error", "Failed to delete record");
            }
        } 
        else {
            showMessage("The table is empty. Deletion is not possible.", "Error", "Failed to delete record");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    
    public void showMessage(String message, String type, String title){
        JOptionPane optionPane = new JOptionPane(message);
        if(type.equals("Info")) {
            optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
        }
        else if (type.equals("Error")){
            optionPane.setMessageType(JOptionPane.ERROR_MESSAGE);
        }
        JDialog dialog = optionPane.createDialog(title);
        dialog.setAlwaysOnTop(true);
        dialog.setVisible(true);
    }
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        
        loadTable();
    }//GEN-LAST:event_formWindowOpened

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
         //control de que la tabla no este vacia
        if(TransactionTable.getRowCount() > 0){
            //valido que se haya seleccionado un registro
            if(TransactionTable.getSelectedRow() != -1){
         //obtener la id de la transaccion que quiero actualizar
                int idTransaction = Integer.parseInt(String.valueOf(TransactionTable.getValueAt(TransactionTable.getSelectedRow(), 0)));
                
                UpdateTransaction update = new UpdateTransaction(idTransaction);
                update.setVisible(true);
                update.setLocationRelativeTo(null);
                
                this.dispose();
                 }
            else {
                    showMessage("Please select a record to update.", "Error", "Update Failed");
            }
        } 
        else {
                    showMessage("The table is empty. There are no records to update.", "Error", "Update Failed");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LoaderLabel;
    private javax.swing.JTable TransactionTable;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    
    private void loadTable() {
            // Mostrar el loader al comenzar la carga
    LoaderLabel.setVisible(true);

    // Usar SwingWorker para cargar los datos en segundo plano
    SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
        @Override
        protected Void doInBackground() throws Exception {
            // LÃ³gica para cargar los datos desde la BD
            DefaultTableModel tableModel = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };

            String titles[] = {"id Transaction", "Id User", "Id Module", "Id Forms", "Query Type", "Old Value", "New Value", "ID User Create", "ID User Update", "Date Create", "Date Update"};
            tableModel.setColumnIdentifiers(titles);

            // Traer los datos desde la bd
            List<Transaction> transactionList = control.getData();

            // Setear la data en la tabla
            if (transactionList != null) {
                for (Transaction data : transactionList) {
                    Object[] object = {
                        data.getIdTransaction(), data.getIdUser(), data.getIdModule(),
                        data.getIdForms(), data.getQueryType(), data.getOldValue(), data.getNewValue(),
                        data.getIdUserCreate(), data.getIdUserUpdate(), data.getDateCreate(), data.getDateUpdate()
                    };
                    tableModel.addRow(object);
                }
            }
            
            TransactionTable.setModel(tableModel);
            return null;
        }

        @Override
        protected void done() {
            // Ocultar el loader cuando la carga haya terminado
            LoaderLabel.setVisible(false);
        }
    };

    // Iniciar la tarea en segundo plano
    worker.execute();
        
    }
}
